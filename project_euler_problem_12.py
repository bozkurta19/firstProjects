"""
Problem :
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

from time import time


def numberOfDivisors(num):
    # Since every number has at least 2 divisors, 1 and itself, we are making the "number_of_divisors" 2 to shorten
    # the process.
    number_of_divisors = 2

    sqrt = num ** (1 / 2)
    lim = int(sqrt) + 1

    # subtracting 1 if the number is perfect square since we're gonna add it two times in the loop
    if sqrt == int(sqrt):
        number_of_divisors -= 1

    for i in range(2, lim):
        if num % i == 0:
            number_of_divisors += 2

    return number_of_divisors


start = time()

n = 0
number_of_divisors = 0
while not number_of_divisors > 500:
    n += 1

    # Since a triangle number is n(n+1)/2 :
    if n % 2 == 0:
        number_of_divisors = numberOfDivisors(n / 2) * numberOfDivisors(n + 1)

    else:
        number_of_divisors = numberOfDivisors(n) * numberOfDivisors((n + 1) / 2)

end = time()

print(int((n * (n + 1)) / 2))
print("Time : {:.3f}".format(end - start))
